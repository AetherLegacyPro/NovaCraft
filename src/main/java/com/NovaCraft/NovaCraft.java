package com.NovaCraft;

import com.NovaCraft.Items.NovaCraftItems;
import com.NovaCraft.TileEntity.NovaCraftTileEntities;
import com.NovaCraft.achievements.AchievementsNovaCraft;
import com.NovaCraft.achievements.NovaCraftEventHandler;
import com.NovaCraft.config.Configs;
import com.NovaCraft.config.ConfigsMain;
import com.NovaCraft.entity.EntitiesNovaCraft;
import com.NovaCraft.entity.EntityOutsider;
import com.NovaCraft.entity.EntityOutsiderEye;
import com.NovaCraft.entity.hardmode.EntityHardmodeCreeper;
import com.NovaCraft.entity.hardmode.EntityHardmodeGhast;
import com.NovaCraft.entity.hardmode.EntityHardmodeMagmaCube;
import com.NovaCraft.entity.hardmode.EntityHardmodeSkeleton;
import com.NovaCraft.entity.hardmode.EntityHardmodeSlime;
import com.NovaCraft.entity.hardmode.EntityHardmodeSpider;
import com.NovaCraft.entity.hardmode.EntityHardmodeZombie;
import com.NovaCraft.registry.NovaCraftCreativeTabs;
import com.NovaCraft.registry.NovaCraftFuelHander;
import com.NovaCraft.registry.NovaCraftRegistries;
import com.NovaCraft.world.NCWorldGeneratorDeeperCaves;
import com.NovaCraft.world.NCWorldGeneratorPlants;
import com.NovaCraft.world.NCWorldGeneratorPost;
import com.NovaCraft.world.NCWorldGeneratorPre;
import com.NovaCraft.world.NCWorldGeneratorVillages;
import com.NovaCraft.world.OreGenEventHandler;
import com.NovaCraft.world.PopulateChunkEventHandler;
import com.NovaCraft.world.ancient_city.AncientCityGen;
import com.NovaCraft.world.bastion.treasure.BastionGen;
import com.NovaCraft.world.end.DestitudeIslandWorldGen;
import com.NovaCraft.world.end.EndIslandWorldGen;
import com.NovaCraft.world.end.NCWorldGeneratorEnd;
import com.NovaCraft.world.nether.NCWorldGeneratorNether;
import com.NovaCraft.world.nether.structure.NovaNetherBridgeGenerator;
import com.NovaCraft.world.nether.structure.StructureNovaCraftNetherBridgePieces;
import com.NovaCraft.world.nether.structure.MapGenNetherBridgeNovaCraft.Start;
import com.NovaCraft.world.sculkshaft.SculkMineshaftGenerator;
import com.NovaCraft.world.sculkshaft.StructureSculkMineshaftPieces;
import com.NovaCraft.world.sculkshaft.StructureSculkMineshaftStart;
import com.NovaCraft.world.structure.WorldGenRavineInjector;
import com.NovaCraftBlocks.NovaCraftBlocks;
import com.NovaCraftBlocks.potion.NovaCraftLiquids;
import cpw.mods.fml.common.FMLCommonHandler;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.ObfuscationReflectionHelper;
import cpw.mods.fml.common.SidedProxy;
import cpw.mods.fml.common.Mod.EventHandler;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.event.FMLServerStartingEvent;
import cpw.mods.fml.common.network.NetworkRegistry;
import cpw.mods.fml.common.network.simpleimpl.SimpleNetworkWrapper;
import cpw.mods.fml.common.registry.EntityRegistry;
import cpw.mods.fml.common.registry.GameRegistry;
import java.io.File;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import net.minecraft.entity.EnumCreatureType;
import net.minecraft.entity.monster.EntityZombie;
import net.minecraft.server.MinecraftServer;
import net.minecraft.util.EnumChatFormatting;
import net.minecraft.util.ResourceLocation;
import net.minecraft.world.World;
import net.minecraft.world.biome.BiomeGenBase;
import net.minecraft.world.biome.BiomeGenBase.SpawnListEntry;
import net.minecraft.world.gen.structure.MapGenStructureIO;
import net.minecraftforge.common.BiomeDictionary;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.common.BiomeDictionary.Type;
import org.apache.logging.log4j.Logger;

@Mod(modid = "nova_craft", version = "1.4.5", name = "NovaCraft")
public class NovaCraft {
    public static final String MOD_ID = "nova_craft";
    public static final String VERSION = "1.4.5";
    public static Random rand;
    private World worldObj;
    @Instance("nova_craft")
    public static NovaCraft instance;
    public static Logger logger;
    @SidedProxy(
            clientSide = "com.NovaCraft.ClientProxy",
            serverSide = "com.NovaCraft.CommonProxy"
    )
    public static CommonProxy proxy;
    public static SimpleNetworkWrapper networkWrapper;
    public CommonProxy guiHandler = new CommonProxy();
    public static File configFile;

    @EventHandler
    public void preInit(FMLPreInitializationEvent event) {
        event.getModMetadata().autogenerated = false;
        event.getModMetadata().name = EnumChatFormatting.DARK_AQUA + "NovaCraft" + EnumChatFormatting.DARK_PURPLE;
        event.getModMetadata().version = EnumChatFormatting.BLUE + "1.4.5";
        event.getModMetadata().credits = EnumChatFormatting.AQUA + " Special thanks to Roadhog360 , Delirus & rrogalski ";
        event.getModMetadata().authorList.add(EnumChatFormatting.BLUE + "Wojak");
        event.getModMetadata().url = EnumChatFormatting.GRAY + "https://www.curseforge.com/minecraft/mc-mods/novacraft";
        event.getModMetadata().description = EnumChatFormatting.GREEN + "A 1.7.10 mod that looks to complement/enhance the base game";
        instance = this;
        logger = event.getModLog();
        ConfigsMain.loadConfigs(configFile = new File(event.getModConfigurationDirectory(), "NovaCraft"));
        NovaCraftOverrideTextures.init();
        FMLCommonHandler.instance().bus().register(this);
        NovaCraftLiquids.preInit();
        NovaCraftItems.initialization();
        NovaCraftBlocks.initialization();
        NovaCraftBlocks.initializeHarvestLevels();
        if (Configs.enableVanillaBiomeAlterations) {
            BiomeAlterations.applyTweaks();
        }

        MinecraftForge.TERRAIN_GEN_BUS.register(this);
        MinecraftForge.ORE_GEN_BUS.register(new OreGenEventHandler());
        MinecraftForge.EVENT_BUS.register(new PopulateChunkEventHandler());
        GameRegistry.registerWorldGenerator(new NCWorldGeneratorPre(), Integer.MAX_VALUE);
        if (Configs.enableSculkInfestedMineshaft) {
            GameRegistry.registerWorldGenerator(new SculkMineshaftGenerator(), 0);
            MapGenStructureIO.registerStructure(StructureSculkMineshaftStart.class, "SculkMineshaft");
            StructureSculkMineshaftPieces.registerStructurePieces();
        }

        if (Configs.enableDeepoidFortress) {
            GameRegistry.registerWorldGenerator(new NovaNetherBridgeGenerator(), 0);
            MapGenStructureIO.registerStructure(Start.class, "NovaFortress");
            StructureNovaCraftNetherBridgePieces.registerStructureNovaCraftNetherBridgePieces();
        }

        if (Configs.enableAncientCity) {
            GameRegistry.registerWorldGenerator(new AncientCityGen(), Integer.MAX_VALUE);
        }

        if (Configs.enableInfestedBastion) {
            GameRegistry.registerWorldGenerator(new BastionGen(), Integer.MAX_VALUE);
        }

    }

    @EventHandler
    public void init(FMLInitializationEvent event) {
        if (FMLCommonHandler.instance().getEffectiveSide().isClient() && Configs.enableGammaAlterations) {
            MinecraftForge.EVENT_BUS.register(new LightningAlterations());
        }

        MinecraftForge.EVENT_BUS.register(new WorldGenRavineInjector());
        GameRegistry.registerWorldGenerator(new NCWorldGeneratorVillages(), 0);
        EntitiesNovaCraft.initialization();
        EntitiesNovaCraft.addSpawns();
        NovaCraftCreativeTabs.initialization();
        NovaCraftRegistries.register();
        GameRegistry.registerFuelHandler(new NovaCraftFuelHander());
        AchievementsNovaCraft.initialization();
        NovaCraftTileEntities.initialization();
        GameRegistry.registerWorldGenerator(new EndIslandWorldGen(), Integer.MAX_VALUE);
        GameRegistry.registerWorldGenerator(new DestitudeIslandWorldGen(), Integer.MAX_VALUE);
        NetworkRegistry.INSTANCE.registerGuiHandler(instance, new CommonProxy());
        proxy.init();
        proxy.registerRenderers();
        CommonProxy.registerEvent(new NovaCraftClientEvents());
        CommonProxy.registerEvent(new NovaCraftEventHandler());
    }

    @EventHandler
    public void postInit(FMLPostInitializationEvent event) {
        GameRegistry.registerWorldGenerator(NCWorldGeneratorNether.INSTANCE, Integer.MAX_VALUE);
        GameRegistry.registerWorldGenerator(NCWorldGeneratorEnd.INSTANCE, Integer.MAX_VALUE);
        GameRegistry.registerWorldGenerator(new NCWorldGeneratorPost(), Integer.MAX_VALUE);
        GameRegistry.registerWorldGenerator(NCWorldGeneratorPlants.INSTANCE, Integer.MAX_VALUE);
        GameRegistry.registerWorldGenerator(NCWorldGeneratorDeeperCaves.INSTANCE, Integer.MAX_VALUE);
    }

    @EventHandler
    public void serverStarting(FMLServerStartingEvent event) {
        World world = MinecraftServer.getServer().worldServers[0];
        Hardmode data = Hardmode.get(world);
        if (data.getHardmode()) {
            System.out.println("Hardmode is active! Spawning hardmode mobs...");
            this.registerHardmodeMobs(world);
        }

    }

    public void registerHardmodeMobs(World world) {
        for(int i = 0; i < BiomeGenBase.getBiomeGenArray().length; ++i) {
            BiomeGenBase biome = BiomeGenBase.getBiomeGenArray()[i];
            if (biome != null && overworldBiome(biome)) {
                if (Configs.enableSpawnHardmodeCreeper) {
                    EntityRegistry.addSpawn(EntityHardmodeCreeper.class, 12, 3, 12, EnumCreatureType.monster, new BiomeGenBase[]{biome});
                }

                if (Configs.enableSpawnHardmodeSpider) {
                    EntityRegistry.addSpawn(EntityHardmodeSpider.class, 10, 4, 10, EnumCreatureType.monster, new BiomeGenBase[]{biome});
                }

                if (Configs.enableSpawnHardmodeZombie) {
                    EntityRegistry.addSpawn(EntityHardmodeZombie.class, 15, 5, 15, EnumCreatureType.monster, new BiomeGenBase[]{biome});
                }

                if (Configs.enableSpawnHardmodeSkeleton) {
                    EntityRegistry.addSpawn(EntityHardmodeSkeleton.class, 15, 5, 15, EnumCreatureType.monster, new BiomeGenBase[]{biome});
                }

                if (Configs.enableSpawnHardmodeSlime) {
                    EntityRegistry.addSpawn(EntityHardmodeSlime.class, 2, 3, 2, EnumCreatureType.monster, BiomeDictionary.getBiomesForType(Type.SWAMP));
                }

                EntityRegistry.addSpawn(EntityOutsiderEye.class, 2, 2, 2, EnumCreatureType.monster, new BiomeGenBase[]{biome});
                EntityRegistry.addSpawn(EntityOutsider.class, 2, 2, 2, EnumCreatureType.monster, new BiomeGenBase[]{biome});
            }

            if (biome != null) {
                if (Configs.enableSpawnHardmodeMagmaCube) {
                    EntityRegistry.addSpawn(EntityHardmodeMagmaCube.class, 8, 2, 8, EnumCreatureType.monster, BiomeDictionary.getBiomesForType(Type.NETHER));
                }

                if (Configs.enableSpawnHardmodeGhast) {
                    EntityRegistry.addSpawn(EntityHardmodeGhast.class, 10, 1, 10, EnumCreatureType.monster, BiomeDictionary.getBiomesForType(Type.NETHER));
                }

                EntityRegistry.addSpawn(EntityOutsiderEye.class, 2, 2, 2, EnumCreatureType.monster, BiomeDictionary.getBiomesForType(Type.NETHER));
                EntityRegistry.addSpawn(EntityOutsider.class, 2, 2, 2, EnumCreatureType.monster, BiomeDictionary.getBiomesForType(Type.NETHER));
                EntityRegistry.addSpawn(EntityOutsiderEye.class, 2, 2, 2, EnumCreatureType.monster, BiomeDictionary.getBiomesForType(Type.END));
                EntityRegistry.addSpawn(EntityOutsider.class, 2, 2, 2, EnumCreatureType.monster, BiomeDictionary.getBiomesForType(Type.END));
            }
        }

    }

    public static boolean overworldBiome(BiomeGenBase biome) {
        List<SpawnListEntry> monsterList = (List)ObfuscationReflectionHelper.getPrivateValue(BiomeGenBase.class, biome, new String[]{"as", "field_76761_J", "spawnableMonsterList"});
        Iterator var2 = monsterList.iterator();

        SpawnListEntry entity;
        do {
            if (!var2.hasNext()) {
                return false;
            }

            entity = (SpawnListEntry)var2.next();
        } while(entity.entityClass != EntityZombie.class);

        return true;
    }

    public static ResourceLocation locate(String location) {
        return new ResourceLocation("nova_craft", location);
    }

    public static String find(String location) {
        return modAddress() + location;
    }

    public static String modAddress() {
        return "nova_craft:";
    }
}

